#!/bin/tcsh -f
# mni152reg.fnirt - sources
if(-e $FREESURFER_HOME/sources.csh) then
  source $FREESURFER_HOME/sources.csh
endif

set VERSION = '$Id$';
set scriptname = `basename $0`
set mniprepdir = /autofs/space/curv_001/users/mni152reg-prep2
set mni152_2mm_to_1mmcrop_reg = $mniprepdir/mni152.2mm-to-1mmcrop.lta
set mni152_2mm  = $mniprepdir/mni152.2mm.brain.nii.gz

set outdir = ();
set subject = ();
set invol = ()
set targvol = ()
set DoTest = 1
set Crop = 1
set ForceUpdate = 0

set tmpdir = ();
set cleanup = 1;
set LF = ();

set inputargs = ($argv);
set PrintHelp = 0;
if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif
goto parse_args;
parse_args_return:
goto check_params;
check_params_return:

set StartTime = `date`;
set tSecStart = `date '+%s'`;
set year  = `date +%Y`
set month = `date +%m`
set day   = `date +%d`
set hour   = `date +%H`
set min    = `date +%M`

if($#outdir) then
  mkdir -p $outdir/log
  set tmpdir = $outdir
  set cleanup = 0
else
  set outdir = `dirname $m3z`
  mkdir -p $outdir
endif
pushd $outdir > /dev/null
set outdir = `pwd`;
popd > /dev/null

#if($#tmpdir == 0) then
#  if(-dw /scratch)   set tmpdir = /scratch/tmpdir.mni152reg.fnirt.$$
#  if(! -dw /scratch) set tmpdir = $outdir/tmpdir.mni152reg.fnirt.$$
#endif
#mkdir -p $tmpdir

# Set up log file
if($#LF == 0) set LF = $outdir/log/mni152reg.fnirt.Y$year.M$month.D$day.H$hour.M$min.log
if($LF != /dev/null) rm -f $LF
echo "Log file for mni152reg.fnirt" >> $LF
date  | tee -a $LF
echo "" | tee -a $LF
echo "setenv SUBJECTS_DIR $SUBJECTS_DIR" | tee -a $LF
echo "cd `pwd`"  | tee -a $LF
echo $0 $inputargs | tee -a $LF
ls -l $0  | tee -a $LF
echo "" | tee -a $LF
cat $FREESURFER_HOME/build-stamp.txt | tee -a $LF
echo $VERSION | tee -a $LF
uname -a  | tee -a $LF
echo "pid $$" | tee -a $LF
if($?PBS_JOBID) then
  echo "pbsjob $PBS_JOBID"  >> $LF
endif
if($?SLURM_JOB_ID) then
  echo SLURM_JOB_ID $SLURM_JOB_ID >> $LF
endif

#========================================================
setenv OMP_NUM_THREADS 1 # Not sure this matters for spm
if($Crop) then
  # Crop for speed
  set involbb = $outdir/invol.bb.nii.gz
  set ud = `UpdateNeeded $involbb $invol`
  if($ud || $ForceUpdate) then
    set cmd = (mri_mask -bb 3 $invol $invol $involbb)
    echo $cmd | tee -a $LF
    $cmd | tee -a $LF
    if($status) exit 1
  endif
  # To get back to the full FoV
  set regbbtoinvol = $outdir/reg.bb-to-invol.lta
  set ud = `UpdateNeeded $regbbtoinvol $involbb $invol`
  if($ud || $ForceUpdate) then
    #set cmd = (tkregister2_cmdl --mov $involbb --reg $outdir/deleteme.dat \
    #  --ltaout $regbbtoinvol --targ $invol --regheader --noedit --s $subject);
    set cmd = (lta_convert --inlta identity.nofile --src $involbb \
      --trg $invol  --outlta $regbbtoinvol)
    echo $cmd | tee -a $LF
    $cmd |& tee -a $LF
    if($status) exit 1
  endif
else
  set involbb = $invol
endif

# Compute a registration for orientation so that we don't have to
# worry about positive determinants. Not sure this actually works. The
# FS subject volumes all have neg det, so should not be a problem
#set reg0 = $outdir/reg0.dat
#set lta0 = $outdir/reg0.lta
set fslmat0 = $outdir/fslmat0.mat
set ud = `UpdateNeeded $fslmat0 $involbb`
if($ud || $ForceUpdate) then
  #set cmd = (tkregister2_cmdl --mov $involbb --reg $reg0 --ltaout $lta0 \
  #  --targ $mni152_2mm --regheader --fslregout $fslmat0 --noedit);
  set cmd = (lta_convert --inlta identity.nofile --src $involbb \
    --trg $mni152_2mm  --outfsl $fslmat0)
  echo $cmd | tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1
endif

# Compute the affine reg, needed for fnirt
set fslaffine = $outdir/fsl.affine.mat
set ud = `UpdateNeeded $fslaffine $fslmat0 $involbb`
if($ud || $ForceUpdate) then
  set sch = $FREESURFER_HOME/bin/flirt.newdefault.20080811.sch 
  set cmd = (flirt -in $involbb -ref $mni152_2mm -init $fslmat0 \
    -searchrx -90 90 -searchry -90 90 -searchrz  -90 90 \
    -cost corratio -bins 256 -verbose 1 -omat $fslaffine \
    -schedule $sch)
  echo $cmd | tee -a $LF
  $cmd |& tee -a $LF
  if($status) exit 1
endif

# Compute the nonlinear warp
set warp = $outdir/warp.nii.gz
set ud = `UpdateNeeded $warp $fslaffine $involbb`
if($ud || $ForceUpdate) then
  set cmd = (fnirt --aff=$fslaffine --config=T1_2_MNI152_2mm --ref=$mni152_2mm \
   --in=$involbb --fout=$warp --cout=$outdir/c.field.nii.gz \
   --iout=$outdir/out.nii.gz -v)
  echo $cmd | tee -a $LF
  fs_time $cmd |& tee -a $LF
  if($status) exit 1
endif

set m3z = $outdir/warp.2mm.m3z
set ud = `UpdateNeeded $m3z $warp $involbb`
if($ud || $ForceUpdate) then
  set cmd = (mri_warp_convert --infsl $warp --g $involbb --outm3z $m3z )
  if($Crop) set cmd = ($cmd --lta1 $regbbtoinvol)
  echo $cmd | tee -a $LF
  fs_time $cmd |& tee -a $LF
  if($status) exit 1
endif

# Compute the warp the the cropped 1.0mm mni152 space
set warp1mm = $outdir/warp.1mm.m3z
set ud = `UpdateNeeded $warp1mm $m3z`
if($ud || $ForceUpdate) then
  date | tee -a $LF
  set cmd = (mri_warp_convert --inm3z $m3z \
    --outm3z $warp1mm --lta2 $mni152_2mm_to_1mmcrop_reg)
  echo "\n\n"| tee -a $LF 
  echo $cmd | tee -a $LF 
  fs_time $cmd |& tee -a $LF
  if($status) goto error_exit
  echo "\n\n"| tee -a $LF 
endif

# This should be very similar/identical to out.nii.gz
if($DoTest) then
  set testvol = $outdir/test.mgz
  set ud = `UpdateNeeded $testvol $m3z $invol `
  if($ud || $ForceUpdate) then
    set cmd = (mri_convert $invol -at $m3z $testvol)
    echo $cmd | tee -a $LF
    fs_time $cmd |& tee -a $LF
    if($status) exit 1
  endif
  set cmd = (mri_diff --po $outdir/out.nii.gz $outdir/test.mgz)
  echo $cmd | tee -a $LF
  $cmd | tee $outdir/diff.dat | tee -a $LF
endif

#========================================================

# Cleanup
#if($cleanup) rm -rf $tmpdir

# Done
echo " " |& tee -a $LF
set tSecEnd = `date '+%s'`;
@ tSecRun = $tSecEnd - $tSecStart;
set tRunMin = `echo $tSecRun/60|bc -l`
set tRunMin = `printf %5.2f $tRunMin`
set tRunHours = `echo $tSecRun/3600|bc -l`
set tRunHours = `printf %5.2f $tRunHours`
echo "Started at $StartTime " |& tee -a $LF
echo "Ended   at `date`" |& tee -a $LF
echo "Mni152reg.Fnirt-Run-Time-Sec $tSecRun" |& tee -a $LF
echo "Mni152reg.Fnirt-Run-Time-Min $tRunMin" |& tee -a $LF
echo "Mni152reg.Fnirt-Run-Time-Hours $tRunHours" |& tee -a $LF
echo " " |& tee -a $LF
echo "mni152reg.fnirt Done" |& tee -a $LF
exit 0

###############################################

############--------------##################
error_exit:
echo "ERROR:"

exit 1;
###############################################

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "--i":
      if($#argv < 1) goto arg1err;
      set invol = $argv[1]; shift;
      breaksw

    case "--m3z":
      if($#argv < 1) goto arg1err;
      set m3z = $argv[1]; shift;
      breaksw

    case "--o":
      if($#argv < 1) goto arg1err;
      set outdir = $argv[1]; shift;
      breaksw

    case "--s":
      if($#argv < 1) goto arg1err;
      set subject = $argv[1]; shift;
      breaksw

    case "--sd":
      if($#argv < 1) goto arg1err;
      setenv SUBJECTS_DIR $argv[1]; shift;
      breaksw

    case "--crop":
     set Crop = 1
     breaksw
    case "--no-crop":
     set Crop = 0
     breaksw

    case "--test":
     set DoTest = 1
     breaksw
    case "--no-test":
     set DoTest = 0
     breaksw

    case "--force":
     set ForceUpdate = 1
     breaksw

    case "--log":
      if($#argv < 1) goto arg1err;
      set LF = $argv[1]; shift;
      breaksw

    case "--nolog":
    case "--no-log":
      set LF = /dev/null
      breaksw

    case "--tmp":
    case "--tmpdir":
      if($#argv < 1) goto arg1err;
      set tmpdir = $argv[1]; shift;
      set cleanup = 0;
      breaksw

    case "--nocleanup":
      set cleanup = 0;
      breaksw

    case "--cleanup":
      set cleanup = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

if($#subject) then
  set sd = $SUBJECTS_DIR/$subject
  if(! -e $sd) then
    echo "ERROR: cannot find $subject"
    exit 1;
  endif
  if($#invol == 0)   set invol = $sd/mri/norm.mgz
  if($#targvol == 0) set targvol = $mni152_2mm
  if($#outdir == 0)  set outdir = $sd/mri/mni152reg.fnirt
  endif
endif

if($#invol == 0) then
  echo "ERROR: must spec input volume"
  exit 1
endif

foreach f ($invol)
  if(! -e $f) then
    echo "ERROR: cannot find $f"
    exit 1
  endif
end

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################
arg2err:
  echo "ERROR: flag $flag requires two arguments"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "mni152reg.fnirt"
  echo "  --i invol"
  echo "  --o outdir"
  echo "  --tmp tmpdir"
  echo "  --s subject (invol=norm.mgz, outdir=mni152reg.fnirt) "
  echo ""

  if(! $PrintHelp) exit 1;
  echo $VERSION
  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
exit 1;

#---- Everything below here is printed out as part of help -----#
BEGINHELP
