#!/bin/tcsh -f
# mni152reg.dartel - sources
if(-e $FREESURFER_HOME/sources.csh) then
  source $FREESURFER_HOME/sources.csh
endif

set VERSION = '$Id$';
set scriptname = `basename $0`
set mniprepdir = /autofs/space/curv_001/users/mni152reg-prep2
set mni152_15mm = $mniprepdir/mni152.1.5mm.brain.nii.gz
set mni152_15mm_to_1mmcrop_reg = $mniprepdir/mni152.1.5mm-to-1mmcrop.lta
# note: targvol not needed because VBM gets it internally

set outdir = ();
set subject = ();
set invol = ()
set ForceUpdate = 0

set tmpdir = ();
set cleanup = 1;
set LF = ();

set inputargs = ($argv);
set PrintHelp = 0;
if($#argv == 0) goto usage_exit;
set n = `echo $argv | grep -e -help | wc -l` 
if($n != 0) then
  set PrintHelp = 1;
  goto usage_exit;
endif
set n = `echo $argv | grep -e -version | wc -l` 
if($n != 0) then
  echo $VERSION
  exit 0;
endif
goto parse_args;
parse_args_return:
goto check_params;
check_params_return:

set StartTime = `date`;
set tSecStart = `date '+%s'`;
set year  = `date +%Y`
set month = `date +%m`
set day   = `date +%d`
set hour   = `date +%H`
set min    = `date +%M`

if($#outdir) then
  mkdir -p $outdir/log
  set tmpdir = $outdir
  set cleanup = 0
else
  set outdir = `dirname $m3z`
  mkdir -p $outdir
endif
pushd $outdir > /dev/null
set outdir = `pwd`;
popd > /dev/null

#if($#tmpdir == 0) then
#  if(-dw /scratch)   set tmpdir = /scratch/tmpdir.mni152reg.dartel.$$
#  if(! -dw /scratch) set tmpdir = $outdir/tmpdir.mni152reg.dartel.$$
#endif
#mkdir -p $tmpdir

# Set up log file
if($#LF == 0) set LF = $outdir/log/mni152reg.dartel.Y$year.M$month.D$day.H$hour.M$min.log
if($LF != /dev/null) rm -f $LF
echo "Log file for mni152reg.dartel" >> $LF
date  | tee -a $LF
echo "" | tee -a $LF
echo "setenv SUBJECTS_DIR $SUBJECTS_DIR" | tee -a $LF
echo "cd `pwd`"  | tee -a $LF
echo $0 $inputargs | tee -a $LF
ls -l $0  | tee -a $LF
echo "" | tee -a $LF
cat $FREESURFER_HOME/build-stamp.txt | tee -a $LF
echo $VERSION | tee -a $LF
uname -a  | tee -a $LF
echo "pid $$" | tee -a $LF
if($?PBS_JOBID) then
  echo "pbsjob $PBS_JOBID"  >> $LF
endif
if($?SLURM_JOB_ID) then
  echo SLURM_JOB_ID $SLURM_JOB_ID >> $LF
endif

#========================================================
setenv OMP_NUM_THREADS 1 # Not sure this matters for spm

# Crop the input?

set warp = $outdir/y_rinput.nii
set ud = `UpdateNeeded $warp $invol`
if($ud || $ForceUpdate) then
  date | tee -a $LF
  set cmd = (run-vbm --i $invol --o $outdir)
  echo "\n\n"| tee -a $LF 
  echo $cmd | tee -a $LF 
  fs_time $cmd |& tee -a $LF
  if($status) goto error_exit
  echo "\n\n"| tee -a $LF 
endif

# Compute the warp the the 1.5mm mni152 space (native spm)
set warpm3z = $outdir/warp.1.5mm.m3z
set ud = `UpdateNeeded $warpm3z $warp`
if($ud || $ForceUpdate) then
  date | tee -a $LF
  set cmd = (mri_warp_convert --inspm $warp --insrcgeom $invol --outm3z $warpm3z)
  echo "\n\n"| tee -a $LF 
  echo $cmd | tee -a $LF 
  fs_time $cmd |& tee -a $LF
  if($status) goto error_exit
  echo "\n\n"| tee -a $LF 
endif

# Compute the warp the the cropped 1.0mm mni152 space
set warpm3z = $outdir/warp.1mm.m3z
set ud = `UpdateNeeded $warpm3z $warp`
if($ud || $ForceUpdate) then
  date | tee -a $LF
  set cmd = (mri_warp_convert --inspm $warp --insrcgeom $invol \
   --lta2 $mni152_15mm_to_1mmcrop_reg --outm3z $warpm3z)
  echo "\n\n"| tee -a $LF 
  echo $cmd | tee -a $LF 
  fs_time $cmd |& tee -a $LF
  if($status) goto error_exit
  echo "\n\n"| tee -a $LF 
endif

#========================================================

# Cleanup
#if($cleanup) rm -rf $tmpdir

# Done
echo " " |& tee -a $LF
set tSecEnd = `date '+%s'`;
@ tSecRun = $tSecEnd - $tSecStart;
set tRunMin = `echo $tSecRun/60|bc -l`
set tRunMin = `printf %5.2f $tRunMin`
set tRunHours = `echo $tSecRun/3600|bc -l`
set tRunHours = `printf %5.2f $tRunHours`
echo "Started at $StartTime " |& tee -a $LF
echo "Ended   at `date`" |& tee -a $LF
echo "Mni152reg.Dartel-Run-Time-Sec $tSecRun" |& tee -a $LF
echo "Mni152reg.Dartel-Run-Time-Min $tRunMin" |& tee -a $LF
echo "Mni152reg.Dartel-Run-Time-Hours $tRunHours" |& tee -a $LF
echo " " |& tee -a $LF
echo "mni152reg.dartel Done" |& tee -a $LF
exit 0

###############################################

############--------------##################
error_exit:
echo "ERROR:"

exit 1;
###############################################

############--------------##################
parse_args:
set cmdline = ($argv);
while( $#argv != 0 )

  set flag = $argv[1]; shift;
  
  switch($flag)

    case "--i":
      if($#argv < 1) goto arg1err;
      set invol = $argv[1]; shift;
      breaksw

    case "--m3z":
      if($#argv < 1) goto arg1err;
      set m3z = $argv[1]; shift;
      breaksw

    case "--o":
      if($#argv < 1) goto arg1err;
      set outdir = $argv[1]; shift;
      breaksw

    case "--s":
      if($#argv < 1) goto arg1err;
      set subject = $argv[1]; shift;
      breaksw

    case "--sd":
      if($#argv < 1) goto arg1err;
      setenv SUBJECTS_DIR $argv[1]; shift;
      breaksw

    case "--force":
     set ForceUpdate = 1
     breaksw

    case "--log":
      if($#argv < 1) goto arg1err;
      set LF = $argv[1]; shift;
      breaksw

    case "--nolog":
    case "--no-log":
      set LF = /dev/null
      breaksw

    case "--tmp":
    case "--tmpdir":
      if($#argv < 1) goto arg1err;
      set tmpdir = $argv[1]; shift;
      set cleanup = 0;
      breaksw

    case "--nocleanup":
      set cleanup = 0;
      breaksw

    case "--cleanup":
      set cleanup = 1;
      breaksw

    case "--debug":
      set verbose = 1;
      set echo = 1;
      breaksw

    default:
      echo ERROR: Flag $flag unrecognized. 
      echo $cmdline
      exit 1
      breaksw
  endsw

end

goto parse_args_return;
############--------------##################

############--------------##################
check_params:

if($#subject) then
  set sd = $SUBJECTS_DIR/$subject
  if(! -e $sd) then
    echo "ERROR: cannot find $subject"
    exit 1;
  endif
  if($#invol == 0)   set invol = $sd/mri/norm.mgz
  if($#outdir == 0)  set outdir = $sd/mri/mni152reg.dartel
  endif
endif

if($#invol == 0) then
  echo "ERROR: must spec input volume"
  exit 1
endif

foreach f ($invol)
  if(! -e $f) then
    echo "ERROR: cannot find $f"
    exit 1
  endif
end

goto check_params_return;
############--------------##################

############--------------##################
arg1err:
  echo "ERROR: flag $flag requires one argument"
  exit 1
############--------------##################
arg2err:
  echo "ERROR: flag $flag requires two arguments"
  exit 1
############--------------##################

############--------------##################
usage_exit:
  echo ""
  echo "mni152reg.dartel"
  echo "  --i invol"
  echo "  --o outdir"
  echo "  --tmp tmpdir"
  echo "  --s subject (invol=norm.mgz, outdir=mni152reg.dartel) "
  echo ""

  if(! $PrintHelp) exit 1;
  echo $VERSION
  cat $0 | awk 'BEGIN{prt=0}{if(prt) print $0; if($1 == "BEGINHELP") prt = 1 }'
exit 1;

#---- Everything below here is printed out as part of help -----#
BEGINHELP
